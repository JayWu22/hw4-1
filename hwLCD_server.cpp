/*
 * You can write copyrights rules here. These rules will be copied into the outputs.
 */

/*
 * Generated by erpcgen 1.10.0 on Sat Apr 29 16:08:38 2023.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "hwLCD_server.h"
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
#include <new>
#include "erpc_port.h"
#endif
#include "erpc_manually_constructed.hpp"

#if 11000 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

#if ERPC_NESTED_CALLS_DETECTION
extern bool nestingDetection;
#endif

ERPC_MANUALLY_CONSTRUCTED_STATIC(LCDService_service, s_LCDService_service);



// Call the correct server shim based on method unique ID.
erpc_status_t LCDService_service::handleInvocation(uint32_t methodId, uint32_t sequence, Codec * codec, MessageBufferFactory *messageFactory)
{
    erpc_status_t erpcStatus;
    switch (methodId)
    {
        case kLCDService_lcd_locate_id:
        {
            erpcStatus = lcd_locate_shim(codec, messageFactory, sequence);
            break;
        }

        case kLCDService_lcd_cls_id:
        {
            erpcStatus = lcd_cls_shim(codec, messageFactory, sequence);
            break;
        }

        case kLCDService_lcd_rows_id:
        {
            erpcStatus = lcd_rows_shim(codec, messageFactory, sequence);
            break;
        }

        case kLCDService_lcd_columns_id:
        {
            erpcStatus = lcd_columns_shim(codec, messageFactory, sequence);
            break;
        }

        case kLCDService_lcd_putc_id:
        {
            erpcStatus = lcd_putc_shim(codec, messageFactory, sequence);
            break;
        }

        default:
        {
            erpcStatus = kErpcStatus_InvalidArgument;
            break;
        }
    }

    return erpcStatus;
}

// Server shim for lcd_locate of LCDService interface.
erpc_status_t LCDService_service::lcd_locate_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t lcd;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&lcd);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        lcd_locate(lcd);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kLCDService_service_id, kLCDService_lcd_locate_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for lcd_cls of LCDService interface.
erpc_status_t LCDService_service::lcd_cls_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        lcd_cls();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kLCDService_service_id, kLCDService_lcd_cls_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for lcd_rows of LCDService interface.
erpc_status_t LCDService_service::lcd_rows_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        lcd_rows();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kLCDService_service_id, kLCDService_lcd_rows_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for lcd_columns of LCDService interface.
erpc_status_t LCDService_service::lcd_columns_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;


    // startReadMessage() was already called before this shim was invoked.

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        lcd_columns();
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kLCDService_service_id, kLCDService_lcd_columns_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

// Server shim for lcd_putc of LCDService interface.
erpc_status_t LCDService_service::lcd_putc_shim(Codec * codec, MessageBufferFactory *messageFactory, uint32_t sequence)
{
    erpc_status_t err = kErpcStatus_Success;

    uint8_t lcd;

    // startReadMessage() was already called before this shim was invoked.

    codec->read(&lcd);

    err = codec->getStatus();
    if (err == kErpcStatus_Success)
    {
        // Invoke the actual served function.
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = true;
#endif
        lcd_putc(lcd);
#if ERPC_NESTED_CALLS_DETECTION
        nestingDetection = false;
#endif

        // preparing MessageBuffer for serializing data
        err = messageFactory->prepareServerBufferForSend(codec->getBuffer());
    }

    if (err == kErpcStatus_Success)
    {
        // preparing codec for serializing data
        codec->reset();

        // Build response message.
        codec->startWriteMessage(kReplyMessage, kLCDService_service_id, kLCDService_lcd_putc_id, sequence);

        err = codec->getStatus();
    }

    return err;
}

erpc_service_t create_LCDService_service(void)
{
    erpc_service_t service;

#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    service = new (nothrow) LCDService_service();
#else
    if (s_LCDService_service.isUsed())
    {
        service = NULL;
    }
    else
    {
        s_LCDService_service.construct();
        service = s_LCDService_service.get();
    }
#endif

    return service;
}

void destroy_LCDService_service(erpc_service_t service)
{
#if ERPC_ALLOCATION_POLICY == ERPC_ALLOCATION_POLICY_DYNAMIC
    erpc_assert(service != NULL);
    delete (LCDService_service *)service;
#else
    (void)service;
    erpc_assert(service == s_LCDService_service.get());
    s_LCDService_service.destroy();
#endif
}

